<?php
/**
 * generate url from raw db data
 *
 * Here we get the raw structure that has been hydrated for $ref link cases
 * by doctrine and replace it with a route generated by the symfony router.
 * We do this in it's own listener due to the fact that there is no way that
 * we can inject anything useable into the default odm hydrator and it looks
 * rather futile to hack it so we can use our own custom hydration code.
 */

namespace Graviton\DocumentBundle\Listener;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpKernel\Event\FilterResponseEvent;

use Graviton\DocumentBundle\Service\ExtReferenceJsonConverterInterface;

/**
 * @author   List of contributors <https://github.com/libgraviton/graviton/graphs/contributors>
 * @license  http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link     http://swisscom.ch
 */
class ExtReferenceListener
{
    /**
     * @var ExtReferenceJsonConverterInterface
     */
    private $converter;

    /**
     * @var array
     */
    private $fields;

    /**
     * @var Request
     */
    private $request;

    /**
     * construct
     *
     * @param ExtReferenceJsonConverterInterface $converter Extref converter
     * @param array                              $fields    extref fields
     * @param RequestStack                       $requests  request
     */
    public function __construct(ExtReferenceJsonConverterInterface $converter, array $fields, RequestStack $requests)
    {
        $this->converter = $converter;
        $this->fields = $fields;
        $this->request = $requests->getCurrentRequest();
    }

    /**
     * add a rel=self Link header to the response
     *
     * @param FilterResponseEvent $event response listener event
     *
     * @return void
     */
    public function onKernelResponse(FilterResponseEvent $event)
    {
        if (!isset($this->fields[$this->request->attributes->get('_route')])) {
            return;
        }

        $content = trim($event->getResponse()->getContent());

        if (!$event->isMasterRequest() || empty($content)) {
            return;
        }

        $type = $event->getResponse()->headers->get('Content-Type');
        if (substr(strtolower($type), 0, 16) !== 'application/json') {
            return;
        }

        $data = json_decode($event->getResponse()->getContent(), true);

        $event->getResponse()->setContent(
            json_encode(
                $this->converter->convert($data, $this->fields[$this->request->attributes->get('_route')])
            )
        );
    }
}
