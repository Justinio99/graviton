{% if docType is defined and docType == "embeddedDocument" %}
    {% set isEmbeddedDocument = true %}
{% else %}
    {% set isEmbeddedDocument = false %}
{% endif %}


{% if docType is not defined %}
    {% set docType = "document" %}
{% endif %}

{# ######## START YAML #}

{{ base }}Document\{{ document }}Base:
  type: mappedSuperclass

{{ base }}Document\{{ document }}:
  type: {{ docType }}
  collection: "{{ collection }}"
  inheritanceType: COLLECTION_PER_CLASS

{# FIELDS #}
  fields:

  {%- if idField is defined %}
      {%- if isEmbeddedDocument == true %}

    id:
      id: false
      type: {{ idField.doctrineType }}
    realId:
      id: true
      type: {{ idField.doctrineType }}
      strategy: AUTO
      {%- else %}

    id:
      id: true
      type: string
      strategy: UUID

      {%- endif %}
  {%- else %}

    id:
      id: true
      type: string
      strategy: UUID
  {%- endif %}

{% if isrecordOriginFlagSet %}
    recordOrigin:
      type: string
{% endif %}

{# RELATION ARRAYS #}
{% set relations = [] %}

{% for field in fields %}
    {%- if 'Graviton' in field.type %}
        {%- if field.relType is defined %}
            {%- set relType = {"embed": "embed", "ref": "reference"}[field.relType] %}
        {%- else %}
            {%- set relType = "reference" %}
        {%- endif %}

        {%- if '[]' in field.type %}
            {%- set relType = relType ~ "Many" %}
            {%- set target = field.type[0:-2] %}
        {%- else %}
            {%- set relType = relType ~ "One" %}
            {%- set target = field.type %}
        {%- endif %}

        {%- if relType starts with 'embed' %}
            {%- set target = target ~ 'Embedded' %}
        {%- endif %}

        {%- set newRelation = [{'relType': relType, 'name': field.fieldName, 'target': target}] %}

        {# does the relation exist? #}
        {%- if not attribute(relations, relType) is defined %}
            {%- set relations = relations|merge({ (relType) : newRelation }) %}
        {%- else %}
            {%- set currentRels = attribute(relations, relType) %}
            {%- set currentRels = currentRels|merge(newRelation) %}
            {%- set relations = relations|merge({ (relType) : newRelation }) %}
        {%- endif %}

{#
        {%- if '[]' in field.type %}
            {%- set target = field.type[0:-2] %}
            {%- if relType == 'embed' %}{%- set target = target ~ 'Embedded' %}{% endif %}

            {%- set oneToMany = oneToMany|merge([{'relType': relType, 'name': field.fieldName, 'target': target}]) %}
        {%- else %}
            {%- set target = field.type %}
            {%- if relType == 'embed' %}{%- set target = target ~ 'Embedded' %}{% endif %}

            {%- set oneToOne = oneToOne|merge([{'relType': relType, 'name': field.fieldName, 'target': target}]) %}
        {%- endif %} #}
    {%- else %}

{# our own types #}
        {%- if field.type == 'hash' %}
    {{ field.fieldName }}:
      type: hash
        {%- elseif field.type == 'hash[]' %}
    {{ field.fieldName }}:
      type: hasharray
        {%- elseif field.type == 'date[]' %}
    {{ field.fieldName }}:
      type: datearray
        {%- elseif '[]' in field.type or field.type == 'array' %}
    {{ field.fieldName }}:
      type: collection
        {%- else %}

{# normal field #}
    {{ field.fieldName }}:
      type: {{ field.type }}
        {%- endif %}
    {%- endif %}
{% endfor %}

{# relations #}
{% if relations is not empty %}
{% for relationType,rels in relations %}
  {{ relationType }}:

  {%- for singleRelation in rels %}

    {{ singleRelation.name }}:
      targetDocument: {{ singleRelation.target }}

    {%- if singleRelation.relType starts with "reference" %}

      cascade: all
    {%- endif %}

    {%- if singleRelation.relType ends with "Many" %}

      strategy: set
    {%- endif %}
  {%- endfor %}

{% endfor %}
{% endif %}

{#
WE WILL TRY WITHOUT REPOSITORY CLASSES

<{{ docType }} name="{{ base }}Document\{{ document }}" repository-class="{{ base }}Repository\{{ document}}Repository"  inheritance-type="COLLECTION_PER_CLASS">

#}

{# indexes #}

{% if not isEmbeddedDocument %}
{% if (indexes is defined and indexes is not empty) or (textIndexes is defined and textIndexes is not empty) %}
    {%- if indexes is defined and indexes is not empty %}
  indexes:

    {%- for index in indexes %}

    {{ index }}:
      keys:
        '{{ index }}': asc
      options:
        background: true
    {%- endfor %}
{%- endif %}

{#
    {% if textIndexes is defined and textIndexes is not empty %}
            <index background="true" name="search_{{ document }}_index">
                {% for index, value in textIndexes %}
                    <key name="search_{{ index }}-{{ value }}"/>
                {% endfor %}
            </index>
    {% endif %}

    </indexes>
#}

{% endif %}
{% endif %}
